{"version":3,"sources":["sipios.png","TeamMemberButtons/TeamMemberButton.js","TeamMemberButtons/TeamMemberButtons.js","TeamMemberTable/TeamMemberTable.js","TeamMemberRow/TeamMemberRow.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TeamMemberButton","_ref","handleClick","children","react_default","a","createElement","className","onClick","TeamMemberButtons","addTeamMember","map","role","TeamMemberButtons_TeamMemberButton","key","TeamMemberTable","TeamMemberRow","_this$props","this","props","teamMember","updateDaysStaffed","updateTJM","value","daysStaffed","onChange","e","id","target","tjm","React","Component","App","state","teamMembers","counter","_this","setState","concat","updateTeamMemberTJM","index","tempTeamMembers","updateTeamMemberDaysStaffed","_this2","weeklyCost","reduce","parseFloat","src","logo","alt","src_TeamMemberButtons_TeamMemberButtons","src_TeamMemberTable_TeamMemberTable","idx","src_TeamMemberRow_TeamMemberRow","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7baafe5c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sipios.1544959e.png\";","import React from \"react\";\n\nconst TeamMemberButton = ({ handleClick, children }) => (\n  <button className=\"team-member-btn\" onClick={handleClick}>\n    {children}\n  </button>\n);\n\nexport default TeamMemberButton;\n","import React from \"react\";\nimport TeamMemberButton from \"./TeamMemberButton\";\nimport \"./tmb.css\";\n\nconst TeamMemberButtons = ({ addTeamMember }) => (\n  <div className=\"team-member-buttons\">\n    {[[\"Dev\", \"👨‍💻\"], [\"Archi\", \"👩‍🏫\"], [\"CA\", \"🕵️‍\"], [\"UX\", \"👩‍🎨\"], [\"DP\", \"🤵\"]].map(role => (\n      <TeamMemberButton key={role[0]} handleClick={() => addTeamMember(role[0])}>\n        {role[1]}\n        <span>{role[0]}</span>\n      </TeamMemberButton>\n    ))}\n  </div>\n);\n\nexport default TeamMemberButtons;\n","import React from \"react\";\nimport \"./tmt.css\";\n\nconst TeamMemberTable = ({ children }) => (\n  <table className=\"members-table\">\n    <thead>\n      <tr>\n        <th>Role</th>\n        <th>Days Staffed per Week</th>\n        <th>Rate</th>\n      </tr>\n    </thead>\n    <tbody>{children}</tbody>\n  </table>\n);\n\nexport default TeamMemberTable;\n","import React from \"react\";\nimport \"./tmr.css\";\n\nclass TeamMemberRow extends React.Component {\n  render() {\n    const { teamMember, updateDaysStaffed, updateTJM } = this.props;\n    return (\n      <tr>\n        <td>{teamMember.role}</td>\n        <td>\n          <input value={teamMember.daysStaffed} onChange={e => updateDaysStaffed(teamMember.id, e.target.value)} />\n        </td>\n        <td>\n          <input value={teamMember.tjm} onChange={e => updateTJM(teamMember.id, e.target.value)} />\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default TeamMemberRow;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport logo from \"./sipios.png\";\n\nimport TeamMemberButtons from \"./TeamMemberButtons\";\nimport TeamMemberTable from \"./TeamMemberTable\";\nimport TeamMemberRow from \"./TeamMemberRow\";\n\nclass App extends Component {\n  state = { teamMembers: [], counter: 0 };\n\n  addTeamMember = role =>\n    this.setState({\n      teamMembers: this.state.teamMembers.concat([{ role: role, tjm: 0, daysStaffed: 0, id: this.state.counter }]),\n      counter: this.state.counter + 1\n    });\n\n  updateTeamMemberTJM = (index, tjm) => {\n    const tempTeamMembers = this.state.teamMembers;\n    tempTeamMembers[index].tjm = tjm;\n    this.setState({ teamMembers: tempTeamMembers });\n  };\n\n  updateTeamMemberDaysStaffed = (index, daysStaffed) => {\n    const tempTeamMembers = this.state.teamMembers;\n    tempTeamMembers[index].daysStaffed = daysStaffed;\n    this.setState({ teamMembers: tempTeamMembers });\n  };\n\n  render() {\n    const { teamMembers } = this.state;\n    const weeklyCost = teamMembers.reduce((weeklyCost, teamMember) => {\n      return weeklyCost + parseFloat(teamMember.daysStaffed) * parseFloat(teamMember.tjm);\n    }, 0);\n    return (\n      <div className=\"App\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div>Add some members to your team:</div>\n        <TeamMemberButtons addTeamMember={this.addTeamMember} />\n        <TeamMemberTable>\n          {teamMembers.map((teamMember, idx) => (\n            <TeamMemberRow\n              key={teamMember.id}\n              teamMember={teamMember}\n              updateTJM={this.updateTeamMemberTJM}\n              updateDaysStaffed={this.updateTeamMemberDaysStaffed}\n            />\n          ))}\n        </TeamMemberTable>\n        <div>\n          Weekly Cost : <span>{weeklyCost}</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}